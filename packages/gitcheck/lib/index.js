#! /usr/bin/env node
import e from"picocolors";import o from"path";import{glob as l}from"glob";import{simpleGit as t}from"simple-git";import i from"ora";import r from"cac";async function n(r){r=r||process.cwd();const n=i("分析目录中").start(),s=await l("**/.git/",{cwd:r,ignore:"node_modules/**"});if(0==s.length)return void n.succeed(e.green("分析完成! "+r+"下，未发现git项目"));const a=s.map((async e=>{const l=o.resolve(r,e,".."),i=await async function(e){const o=t(e,{binary:"git"}),l=await o.status().then((o=>(console.log("res: ",e,o),{ahead:o.ahead,gitDir:e,unsafeDir:!1,finish:0==o.files.length,notCommit:o.files.length>0,staged:o.staged.length>0}))).catch((o=>({gitDir:e,unsafeDir:o.message.includes("config --global --add safe.directory")})));return l}(l);return i}));Promise.all(a).then((o=>{const l=o.filter((e=>e.unsafeDir)).map((e=>e.gitDir)),t=o.filter((e=>e.notCommit)).map((e=>e.gitDir)),i=o.filter((e=>e.staged)).map((e=>e.gitDir));if(n.succeed(e.green("分析完成")),l.length>0&&(console.log(e.bgBlue(`不安全仓库（${l.length}）: `)),l.map((o=>console.log(e.red(o))))),i.length>0)console.log(e.bgBlue(`已暂存，但未推送（${i.length}）：`)),i.map((o=>console.log(e.yellow(o))));else if(t.length>0)console.log(e.bgBlue(`未提交的项目文件夹（${t.length}）: `)),t.map((o=>console.log(e.yellow(o))));else{const l=o.filter((e=>e.ahead)).map((e=>e.gitDir));l.length>0?l.map((o=>console.log(e.yellow(o)))):console.log(e.green("已全部提交且推送"))}})).catch((o=>{n.fail(e.red("分析失败")),console.log(e.red(o))}))}const s=r();s.help(),s.version("0.0.10-beta.3"),s.option("-d ,--dir <dir>","Parse folder",{default:"."}),s.command("rm <dir>","Remove a dir").option("-r, --recursive","Remove recursively").action(((e,o)=>{console.log("options: ",o),console.log("remove "+e)})),s.command("[...files]","files").action(((e,l)=>{n(o.resolve(l.dir))})),s.parse();
